import * as Types from "./JodelInterfaces";
export interface JodelConfig {
    readonly endpoint: string;
    readonly clientId: Types.ClientID;
    readonly userAgent: string;
    readonly deviceUID: Types.DeviceUID;
    readonly keyConfig: JodelKeyConfig<string>;
    readonly clientType: string;
    signHeaders(method: Types.HttpVerb, path: string, timestamp: Date, parameters: string, body: string, headers: Types.FetchHeaders): Promise<Types.SignedFetchHeaders>;
}
export declare class JodelConfigBase implements JodelConfig {
    readonly deviceUID: string;
    readonly keyConfig: JodelKeyConfig<string>;
    readonly clientType: string;
    readonly clientId: string;
    readonly userAgent: string;
    constructor(deviceUID: string, keyConfig: JodelKeyConfig<string>, clientType: string, clientId: string, userAgent: string);
    readonly endpoint: string;
    signHeaders(method: Types.HttpVerb, path: string, timestamp: Date, parameters: string, body: string, headers: Types.FetchHeaders): Promise<Types.SignedFetchHeaders>;
    private signData(data);
    static createDeviceUID(): string;
    protected static encodeParams(ps: string): string;
    protected static encodeComponent(str: string): string;
}
export interface JodelKeyConfigs<TVersion> {
    [version: string]: JodelKeyConfig<TVersion>;
}
export interface JodelKeyConfig<TVersion> {
    key: string;
    clientVersion: TVersion;
    apiVersion: Types.ApiVersion;
}
