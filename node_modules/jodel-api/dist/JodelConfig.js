"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const crypto_1 = require("crypto");
const querystring_1 = require("querystring");
class JodelConfigBase {
    constructor(deviceUID, keyConfig, clientType, clientId, userAgent) {
        this.deviceUID = deviceUID;
        this.keyConfig = keyConfig;
        this.clientType = clientType;
        this.clientId = clientId;
        this.userAgent = userAgent;
    }
    get endpoint() {
        return JodelApiUrl.PRODUCTION_API_URL;
    }
    signHeaders(method, path, timestamp, parameters, body, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            const newHeaders = __assign({}, headers);
            const authHeader = newHeaders["Authorization"];
            const auth = authHeader ? authHeader.split(" ")[1] : "";
            const timestampISO = timestamp.toISOString().replace(/\.\d+Z/, "Z");
            const messageArr = [
                method.toUpperCase(),
                JodelApiUrl.PRODUCTION_HOST,
                JodelApiUrl.PRODUCTION_PORT,
                path,
                auth,
                timestampISO,
                parameters ? JodelConfigBase.encodeParams(parameters) : "",
                body ? body : ""
            ];
            const message = messageArr.join("%");
            const signature = yield this.signData(message);
            newHeaders["X-Client-Type"] = this.clientType;
            newHeaders["X-Api-Version"] = this.keyConfig.apiVersion;
            newHeaders["X-Timestamp"] = timestampISO;
            newHeaders["X-Authorization"] = "HMAC " + signature.toUpperCase();
            return newHeaders;
        });
    }
    signData(data) {
        const hmac = crypto_1.createHmac("sha1", this.keyConfig.key);
        return new Promise((resolve, reject) => {
            hmac.on("readable", () => {
                const signature = hmac.read();
                if (signature && signature instanceof Buffer)
                    return resolve(signature.toString("hex").toUpperCase());
                return reject("No buffer :(");
            });
            const dataBuffer = Buffer.from(data, "utf8");
            hmac.write(dataBuffer);
            hmac.end();
        });
    }
    static createDeviceUID() {
        const universe = "abcdef0123456789";
        const uid = [];
        let n = 64;
        while (n--)
            uid.push(universe.charAt((Math.random() * universe.length) | 0));
        return uid.join("");
    }
    static encodeParams(ps) {
        const qs = querystring_1.parse(ps);
        const resArr = [];
        const encode = JodelConfigBase.encodeComponent;
        for (let key in qs) {
            const value = qs[key];
            resArr.push(encode(key) + "%" + encode(value));
        }
        return resArr.join("%");
    }
    static encodeComponent(str) {
        return encodeURIComponent(str).replace(/\\+/g, "%20").replace(/%21/g, "!").replace(/%27/g, "'").replace(/%28/g, "(").replace(/%29/g, ")").replace(/%7E/g, "~");
    }
}
exports.JodelConfigBase = JodelConfigBase;
class JodelApiUrl {
}
JodelApiUrl.PRODUCTION_HOST = "api.go-tellm.com";
JodelApiUrl.PRODUCTION_PORT = 443;
JodelApiUrl.PRODUCTION_API_URL = `https://${JodelApiUrl.PRODUCTION_HOST}:${JodelApiUrl.PRODUCTION_PORT}/api`;
